@model MonitPro.Models.MOC.MOCDashboard
@{
    ViewBag.Title = "dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>MOC Chart</title>
    <link href="~/Content/legalchartcss.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/c3.min.js"></script>
    <script src="~/Scripts/d3.min.js"></script>
    <link href="~/Content/c3.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.2.0/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
    <style>
        html {
            overflow: auto;
        }

        .pgfit {
            height: 230px;
            width: 300px;
            text-align: center;
            display: inline-block;
            max-height: 500px;
            max-width: 500px;
        }

        .c3-legend {
            display: none;
        }

        .loading {
            display: none;
            text-align: center;
            font-size: 24px;
            color: #555;
        }

        .col-chart {
            padding: 5px; /* Adjust padding as needed */
            margin: 0; /* Remove margin */
        }

        .pgfit {
            height: 250px; /* Adjust height to fit charts efficiently */
            width: 100%; /* Make charts take full width of container */
        }
    </style>
    <script>
        window.onload = function () {
            // Check if html2canvas and ExcelJS are loaded
            console.log("html2canvas version: ", html2canvas);
            console.log("ExcelJS version: ", ExcelJS);

            const button = document.querySelector('#Exceldatacapture');
            if (button) {
                button.addEventListener('click', function () {
                    console.log("Button clicked!");
                    // Your code here
                });
            } else {
                console.error("Element with ID 'Exceldatacapture' not found!");
            }
        };
    </script>
    <script>
        window.onload = function () {
            const button = document.querySelector('#Exceldatacapture');
            if (button) {
                button.addEventListener('click', function () {
                    //console.log("Button clicked!");

                    const startDatef = document.getElementById('startDate').value;
                    const endDatef = document.getElementById('endDate').value;

                    //console.log("Start Date:", startDatef, "End Date:", endDatef);

                    // Check if the element #list exists
                    const listElement = document.querySelector("#list");
                    if (!listElement) {
                        console.error("Element with id 'list' not found.");
                        return;
                    }

                    // Capture chart as image
                    html2canvas(listElement).then(function (canvas) {
                        //console.log("html2canvas completed successfully");

                        // Log canvas dimensions
                        //console.log("Canvas size:", canvas.width, canvas.height);

                        const context = canvas.getContext("2d");

                        // Set font and text style
                        context.font = "30px Arial";
                        context.fillStyle = "black";
                        context.textBaseline = "top";

                        // Add text at specified positions
                        context.fillText("From: " + startDatef, 20, 20);
                        context.fillText("To: " + endDatef, 20, 60);

                        // Log canvas to check if the text was added
                        //console.log("Canvas after adding text:", canvas);

                        // Convert canvas to image
                        const chart1DataUrl = canvas.toDataURL('image/png');
                        //console.log("Image URL generated:", chart1DataUrl);

                        // Create Excel file using ExcelJS
                        const workbook = new ExcelJS.Workbook();
                        const worksheet = workbook.addWorksheet('MOC Dashboard');
                        console.log("ExcelJS Workbook created");

                        // Add the modified chart image to the Excel sheet
                        const chart1Image = workbook.addImage({
                            base64: chart1DataUrl,
                            extension: 'png',
                        });
                        worksheet.addImage(chart1Image, {
                            tl: { col: 1, row: 5 },
                            ext: { width: 1700, height: 800 },
                        });

                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            console.log("Excel file is ready for download");
                            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                            const link = document.createElement('a');
                            link.href = URL.createObjectURL(blob);
                            link.download = 'MOC_Dashboard.xlsx';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }).catch(function (error) {
                            console.error("Error creating Excel file:", error);
                        });
                    }).catch(function (error) {
                        console.error("Error capturing chart as image:", error);
                    });
                });
            }
        };
    </script>
    <style>
        .form-inline-custom {
            display: flex;
            flex-wrap: nowrap;
            align-items: center;
            justify-content: center;
            padding: 10px;
        }

            .form-inline-custom label {
                margin-right: 10px;
            }

            .form-inline-custom input[type="date"] {
                margin-right: 10px;
                padding: 5px;
                border-radius: 5px;
                border: 1px solid #ccc;
            }

            .form-inline-custom button, .form-inline-custom a {
                margin-right: 10px;
                padding: 5px 15px;
                border-radius: 5px;
                border: none;
                background-color: #007bff;
                color: white;
                text-decoration: none;
                cursor: pointer;
            }

            .form-inline-custom a {
                background-color: blueviolet;
            }

                .form-inline-custom button:hover, .form-inline-custom a:hover {
                    background-color: #0056b3;
                }
    </style>
</head>
<body>
    <div class="row">
        <center>
            <div class="form-inline-custom">
                <label for="startDate">From Date:</label>
                <input type="date" id="startDate" />
                <label for="endDate">To Date:</label>
                <input type="date" id="endDate" />
                <button id="loadDataButton">Generate Chart</button>
                <button id="captureButton">PDF</button>
                @*<button id="Exceldatacapture">Export Excel</button>*@
            </div>
        </center>
    </div>
    @*<div class="loading" id="loading">Loading...</div>*@
    <div id="list">
        <div id="Last">
            <table width="95%" align="center" cellpadding="2">
                <tr>
                    <td>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>Monthly MOC Classification</strong></h4>
                            <div class="pgfit" id="Mocclass"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>MOC Plant</strong></h4>
                            <div class="pgfit" id="plant"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>MOC - Category Of Change</strong></h4>
                            <div class="pgfit" id="Category"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>MOC Priority Status</strong></h4>
                            <div class="pgfit" id="PriorityChart"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>MOC Status</strong></h4>
                            <div class="pgfit" id="StatusChart"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>MOC - Recommend Status</strong></h4>
                            <div class="pgfit" id="RecomStatusChart"></div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</body>

</html>
<script>
    $(document).ready(function () {
        function formatDate(date) {
            var d = new Date(date);
            var month = '' + (d.getMonth() + 1);
            var day = '' + d.getDate();
            var year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('-');
        }

        function setDefaultDates() {
            var currentDate = new Date();
            var currentYear = currentDate.getFullYear();
            var startDate;
            currentDate.setDate(currentDate.getDate());
            // If the current month is before April, set start date to April 1st of the previous year
            if (currentDate.getMonth() < 3) {
                startDate = new Date(currentYear - 1, 3, 1); // April 1st of previous year
            } else {
                // Otherwise, set start date to April 1st of the current year
                startDate = new Date(currentYear, 3, 1); // April 1st of current year
            }

            $('#startDate').val(formatDate(startDate));
            $('#endDate').val(formatDate(currentDate));
        }

        function loadData(startDate, endDate) {
            $('#loading').show();

            function ajaxError(jqXHR, textStatus, errorThrown) {
                console.error('AJAX Error: ', textStatus, errorThrown);
                alert('Error loading data. Please try again later.');
            }

            var ajaxCalls = [
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCPriorityCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successpriority(response);
                    },
                    error: ajaxError
                }),
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCRecomStatusCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successRecomStatus(response);
                    },
                    error: ajaxError
                }),
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCClassMonthlyCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successClass(response);
                    },
                    error: ajaxError
                }),
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCPlantCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successPlant(response);
                    },
                    error: ajaxError
                }),
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCCategoryCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successCategory(response);
                    },
                    error: ajaxError
                }),
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("MOCStatusCount", "MOC")",
                    data: { startDate: formatDate(startDate), endDate: formatDate(endDate) },
                    dataType: "json",
                    success: function (response) {
                        successStatus(response);
                    },
                    error: ajaxError
                })
            ];

            $.when.apply($, ajaxCalls).always(function () {
                $('#loading').hide();
            });
        }

        setDefaultDates();
        var startDate = $('#startDate').val();
        var endDate = $('#endDate').val();
        loadData(startDate, endDate);

        $('#loadDataButton').click(function () {
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();
            loadData(startDate, endDate);
        });
    });

    // Success callback functions for different data types
    function successpriority(jsondata) {
        var PriorityNames = [];
        var open = [];
        var close = [];

        jsondata.forEach(function (e) {
            PriorityNames.push(e.PriorityName);
            open.push(e.Open);
            close.push(e.Closed);
        });

        var chart = c3.generate({
            bindto: '#PriorityChart',
            data: {
                columns: [
                    ['Open'].concat(open), ['Closed'].concat(close)
                ],
                type: 'bar',
                groups: [['Open', 'Closed']]
            },
            color: {
                pattern: ['#1f77b4', '#ff7f0e']
            },
            bar: {
                width: { ratio: 0.2 }
            },
            axis: {
                x: {
                    type: 'category',
                    categories: PriorityNames,
                    tick: {
                        rotate: -25,
                        multiline: true
                    },
                    height: 55
                }
            }
        });
    }

    function successRecomStatus(jsondata) {
        var RecomStatusName = [];
        var overdue = [];
        var pending = [];
        var Completed = [];

        jsondata.forEach(function (e) {
            RecomStatusName.push(e.RecomStatusName);
            overdue.push(e.Overdue);
            pending.push(e.Pending);
            Completed.push(e.Completed);
        });

        var chart = c3.generate({
            bindto: '#RecomStatusChart',
            data: {
                columns: [
                    ['Overdue'].concat(overdue), ['Pending'].concat(pending), ['Completed'].concat(Completed)
                ],
                type: 'bar',
                groups: [['Overdue', 'Pending', 'Completed']]
            },
            color: {
                pattern: ['#FFA500', '#de2336', '#1aa130']
            },
            bar: {
                width: { ratio: 0.2 }
            },
            axis: {
                x: {
                    type: 'category',
                    categories: RecomStatusName,
                    tick: {
                        rotate: -25,
                        multiline: true
                    },
                    height: 55
                }
            }
        });
    }

    function successClass(jsondata) {
        var Monthsname = [];
        var Temp = [];
        var Permant = [];

        jsondata.forEach(function (e) {
            Temp.push(e.Temp);
            Permant.push(e.Permant);
            Monthsname.push(e.MOCMonth);
        });

        var chart = c3.generate({
            bindto: '#Mocclass',
            data: {
                columns: [
                    ['Temporary'].concat(Temp), ['Permanent'].concat(Permant)
                ],
                type: 'bar',
                groups: [['Temporary', 'Permanent']]
            },
            bar: {
                width: { ratio: 0.5 }
            },
            axis: {
                x: {
                    type: 'category',
                    categories: Monthsname
                }
            },
            color: {
                pattern: ['#ded531', '#78d95d']
            },
            tooltip: {
                format: {
                    value: function (value, ratio, id) {
                        return value;
                    }
                }
            }
        });
    }

    function successPlant(jsondata) {
        var data = {};
        var PlantNames = [];

        jsondata.forEach(function (e) {
            PlantNames.push(e.PlantName);
            data[e.PlantName] = e.TotalCount;
        });

        var chart = c3.generate({
            bindto: '#plant',
            data: {
                json: [data],
                keys: { value: PlantNames },
                type: 'pie'
            },
            color: {
                pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#3c763d', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#3c763d', '#17becf', '#9edae5']
            },
            tooltip: {
                format: {
                    value: function (value, ratio, id) {
                        return value + ', ' + Math.round(ratio * 100) + '%';
                    }
                }
            },
            pie: {
                label: {
                    format: function (value, ratio, id) {
                        return Math.round(ratio * 100) + '%';
                    }
                }
            },
            legend: { show: false }
        });
    }

    function successCategory(jsondata) {
        var data = {};
        var CategoryNames = [];

        jsondata.forEach(function (e) {
            CategoryNames.push(e.CategoryName);
            data[e.CategoryName] = e.TotalCount;
        });

        var chart = c3.generate({
            bindto: '#Category',
            data: {
                json: [data],
                keys: { value: CategoryNames },
                type: 'pie'
            },
            color: {
                pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#3c763d', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#3c763d', '#17becf', '#9edae5']
            },
            tooltip: {
                format: {
                    value: function (value, ratio, id) {
                        return value + ', ' + Math.round(ratio * 100) + '%';
                    }
                }
            },
            pie: {
                label: {
                    format: function (value, ratio, id) {
                        return Math.round(ratio * 100) + '%';
                    }
                }
            },
            legend: { show: false }
        });
    }

    function successStatus(jsondata) {
        var data = {};
        var StatusNames = [];

        jsondata.forEach(function (e) {
            StatusNames.push(e.StatusName);
            data[e.StatusName] = e.TotalCount;
        });

        var chart = c3.generate({
            bindto: '#StatusChart',
            data: {
                json: [data],
                keys: { value: StatusNames },
                type: 'donut'
            },
            color: {
                pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#3c763d', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#3c763d', '#17becf', '#9edae5']
            },
            tooltip: {
                format: {
                    value: function (value, ratio, id) {
                        return value + ', ' + Math.round(ratio * 100) + '%';
                    }
                }
            },
            donut: {
                label: {
                    format: function (value, ratio, id) {
                        return Math.round(ratio * 100) + '%';
                    }
                }
            },
            legend: { show: false }
        });
    }

    document.getElementById('captureButton').addEventListener('click', function () {
        const startDatef = document.getElementById('startDate').value;
        const endDatef = document.getElementById('endDate').value;
        function formatDate(dateStr) {
            const date = new Date(dateStr);
            const day = String(date.getDate()).padStart(2, '0'); // Pad single digit days
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Pad single digit months
            const year = date.getFullYear();
            return `${day}-${month}-${year}`; // Return in DD-MM-YYYY format
        }

        const startDate = formatDate(startDatef);
        const endDate = formatDate(endDatef);

        html2canvas(document.querySelector("#list")).then(canvas => {
            // Get the image data from the canvas
            const imgData = canvas.toDataURL('image/png');

            // Create jsPDF instance
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF({
                orientation: 'landscape',
                unit: 'mm',
                format: 'a4'
            });

            pdf.setFontSize(12);
            pdf.text(`From Date: ${startDate} -- To Date: ${endDate}`, 10, 16); // x=10, y=20
            pdf.text(`MOC Dashboard`, 10, 10);          // x=10, y=10

            const pageWidth = 297; // A4 width in landscape (in mm)
            const pageHeight = 210; // A4 height in landscape (in mm)
            const imgWidth = pageWidth - 20; // Margins of 10mm on both sides
            const imgHeight = (canvas.height * imgWidth) / canvas.width; // Scale the image
            pdf.addImage(imgData, 'PNG', 10, 40, imgWidth, imgHeight);

            // Save the PDF
            pdf.save("MOC Chart.pdf");
        });
    });
</script>



