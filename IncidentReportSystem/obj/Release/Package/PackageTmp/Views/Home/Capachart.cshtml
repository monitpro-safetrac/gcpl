@model IncidentReportSystem.Models.IncidentListViewModel
@{
    ViewBag.Title = "dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <title>Capachart</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css" rel="stylesheet" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Include necessary CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.18/c3.min.css">
    <!--///////////////////////////////////////////-->
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/c3.min.js"></script>
    <script src="~/Scripts/d3.min.js"></script>
    <link href="~/Content/c3.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.7.20/c3.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.18/c3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
    <style>
        html {
            overflow: auto;
        }

        .pgfit {
            height: 200px;
            width: 300px;
            text-align: center;
            display: inline-block;
            max-height: 500px;
            max-width: 500px;
        }

        .c3-legend {
            display: none;
        }
    </style>
    <style>
        .form-inline-custom {
            display: flex;
            flex-wrap: nowrap;
            align-items: center;
            justify-content: center;
            padding: 10px;
        }

            .form-inline-custom label {
                margin-right: 10px;
            }

            .form-inline-custom input[type="date"] {
                margin-right: 10px;
                padding: 5px;
                border-radius: 5px;
                border: 1px solid #ccc;
            }

            .form-inline-custom button, .form-inline-custom a {
                margin-right: 10px;
                padding: 5px 15px;
                border-radius: 5px;
                border: none;
                background-color: #007bff;
                color: white;
                text-decoration: none;
                cursor: pointer;
            }

            .form-inline-custom a {
                background-color: blueviolet;
            }

                .form-inline-custom button:hover, .form-inline-custom a:hover {
                    background-color: #0056b3;
                }
    </style>
</head>
<body>
    <div class="container">
        <div class="form-inline-custom">
            <label for="startDate">From Date:</label>
            <input type="date" id="startDate">
            <label for="endDate">To Date:</label>
            <input type="date" id="endDate">
            <button id="loadDataButton" class="btn btn-success">Generate Charts</button>
            <button id="captureButton">PDF</button>
            @*<button id="Exceldatacapture">Export Excel</button>*@
            @*<a href="@Url.Action("AllCAPAObservation", "CAPA")" target="_blank" class="btn btn-custom">Track Actions</a>*@
        </div>
    </div>
    <div id="list">
        <div id="Last">
            <table width="95%" align="center" cellpadding="2">
                <tr>
                    <td>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Summary</strong></h4>
                            <div id="overallCAPASummaryChart" class="pgfit"></div>

                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Source</strong></h4>
                            <div id="overallCAPASourceChart" class="pgfit"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Category</strong></h4>
                            <div id="overallCAPACategoryChart" class="pgfit"></div>

                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Recommendation Status</strong></h4>
                            <div id="overallCAPARecommendationChart" class="pgfit"></div>

                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Status</strong></h4>
                            <div id="overallCAPAStatusChart" class="pgfit"></div>
                        </div>
                        <div class="col-xl-4 col-md-4 col-sm-4 col-lg-4" style="text-align:center">
                            <h4><strong>CAPA Priority</strong></h4>
                            <div id="overallCAPAPriorityChart" class="pgfit"></div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // Set default dates to the current financial year
            var currentYear = new Date().getFullYear();
            var currentDate = new Date();
            if (currentDate.getMonth() < 3) {
                startDate = new Date(currentYear - 1, 3, 1+1); // April 1st of previous year
            } else {
                startDate = new Date(currentYear, 3, 1+1); // April 1st of current year
            }
            var endDate = new Date(); // March 31st of next year
            endDate.setDate(endDate.getDate());
            // Set default values in date inputs
            $('#startDate').val(startDate.toISOString().split('T')[0]);
            $('#endDate').val(endDate.toISOString().split('T')[0]);

            // Load data when the page is first loaded
            loadData(startDate, endDate);

            // Load data when the "Load Data" button is clicked
            $('#loadDataButton').click(function() {
                var startDate = new Date($('#startDate').val());
                var endDate = new Date($('#endDate').val());
                loadData(startDate, endDate);
            });

           function loadData(startDate, endDate) {
    $.ajax({
        type: "GET",
        url: '@Url.Action("Index", "Dashboard")',
        data: { startDate: startDate.toISOString(), endDate: endDate.toISOString() },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(response) {
            console.log("AJAX response:", response); // Debugging statement

            function convertToArray(data) {
                return data && typeof data === 'object' ? Object.values(data) : [];
            }

            let overallCAPAStatus = convertToArray(response.OverallCAPAStatus);
            let overallCAPACategory = convertToArray(response.OverallCAPACategory);
            let overallCAPASource = convertToArray(response.OverallCAPASource);
            let overallCAPAPriority = convertToArray(response.OverallCAPAPriority);
            let overallCAPASummary = convertToArray(response.OverallCAPASummary);
            let overallCAPARecommendation = convertToArray(response.OverallCAPARecommendation);

            generateCAPAStatusChart(overallCAPAStatus); console.log(overallCAPAStatus);
            generateCAPACategoryChart(overallCAPACategory);
            generateCAPASourceChart(overallCAPASource);
            generateCAPAPriorityChart(overallCAPAPriority);
            generateCAPASummaryChart(overallCAPASummary);
            generateCAPARecommendationChart(overallCAPARecommendation);
        },
        error: function(xhr, status, error) {
            console.error("Error: " + error);
            console.log(xhr.responseText); // Log the response text for debugging
        }
    });
}

            function generateCAPAStatusChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Status Chart");
                    return;
                }
                var chartData = [];
                var actions = [];
                var actionsCount = [];
                jsondata.forEach(function (e) {
                    actions.push(e.Actions);
                    actionsCount.push(e.ActionsCount);
                    chartData.push([e.Actions, e.ActionsCount]);
                });
                c3.generate({
                    bindto: '#overallCAPAStatusChart',
                    data: {
                        columns: chartData,
                        type: 'donut'
                    },
                    tooltip: {
                        format: {

                            value: function (value, ratio, id) {

                                return value + ', ' + Math.round(ratio * 100) + '%';
                            }

                        }
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: actions,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }
                });
            }

            function generateCAPACategoryChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Category Chart");
                    return;
                }
                var chartData = [];
                var categoryNames = [];
                var totalCount = [];
                jsondata.forEach(function (e) {
                    chartData.push([e.CategoryName, e.TotalCount]);
                });
                c3.generate({
                    bindto: '#overallCAPACategoryChart',
                    data: {
                        columns: chartData,
                        type: 'pie'
                    },
                    tooltip: {
                        format: {

                            value: function (value, ratio, id) {

                                return value + ', ' + Math.round(ratio * 100) + '%';
                            }

                        }
                    },
                    legend: {
                        show: false
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: categoryNames,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }

                });
            }

            function generateCAPASourceChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Source Chart");
                    return;
                }

                var sourceNames = [];
                var totalCount = [];
                var chartData = [];
                jsondata.forEach(function (e) {
                    chartData.push([e.CAPASourceName, e.TotalCount]);
                });

                c3.generate({
                    bindto: '#overallCAPASourceChart',
                    data: {
                        columns: chartData,
                        type: 'pie'
                    },
                    tooltip: {
                        format: {

                            value: function (value, ratio, id) {

                                return value + ', ' + Math.round(ratio * 100) + '%';
                            }

                        }
                    },
                    legend: {
                        show: false
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: sourceNames,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }
                });
            }

            function generateCAPAPriorityChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Priority Chart");
                    return;
                }

                var names = [];
                var totalCount = [];
                var overdue = [];
                var closed = [];
                var opened = [];
                var newCount = [];
                jsondata.forEach(function (e) {
                    names.push(e.Name);
                    totalCount.push(e.TotalCount);
                    overdue.push(e.overdue);
                    closed.push(e.closed);
                    opened.push(e.opened);
                    newCount.push(e.New);
                });

                c3.generate({
                    bindto: '#overallCAPAPriorityChart',
                    data: {
                        columns: [
                            ['Overdue'].concat(overdue),
                            ['Closed'].concat(closed),
                            ['Opened'].concat(opened),
                            ['New'].concat(newCount)
                        ],
                        type: 'bar'
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: names,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }
                });
            }

            function generateCAPASummaryChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Summary Chart");
                    return;
                }

                var months = [];
                var totalCount = [];
                jsondata.forEach(function (e) {
                    months.push(e.ObMonth);
                    totalCount.push(e.TotalCount);
                });

                c3.generate({
                    bindto: '#overallCAPASummaryChart',
                    data: {
                        columns: [
                            ['TotalCount'].concat(totalCount)
                        ],
                        type: 'line'
                    },
                    legend: {
                        show: false
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: months,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }
                });
            }

            function generateCAPARecommendationChart(jsondata) {
                console.log(jsondata);
                if (!jsondata || !Array.isArray(jsondata)) {
                    console.error("Invalid data for CAPA Recommendation Chart");
                    return;
                }

                var functionalManagers = [];
                var totalCount = [];
                var overdue = [];
                var closed = [];
                var opened = [];
                var newCount = [];
                jsondata.forEach(function (e) {
                    functionalManagers.push(e.FunctionalManager);
                    totalCount.push(e.TotalCount);
                    overdue.push(e.overdue);
                    closed.push(e.closed);
                    opened.push(e.opened);
                    newCount.push(e.New);
                });

                c3.generate({
                    bindto: '#overallCAPARecommendationChart',
                    data: {
                        columns: [
                            ['Overdue'].concat(overdue),
                            ['Closed'].concat(closed),
                            ['Opened'].concat(opened),
                           // ['New'].concat(newCount)
                        ],
                        type: 'bar'
                    },
                    axis: {
                        x: {
                            type: 'category',
                            categories: functionalManagers,
                            tick: {
                                rotate: -25,
                                multiline: true
                            },
                            height: 55
                        }
                    }
                });
            }

        });

        document.getElementById('captureButton').addEventListener('click', function () {
            const startDatef = document.getElementById('startDate').value;
            const endDatef = document.getElementById('endDate').value;
            function formatDate(dateStr) {
                const date = new Date(dateStr);
                const day = String(date.getDate()).padStart(2, '0'); // Pad single digit days
                const month = String(date.getMonth() + 1).padStart(2, '0'); // Pad single digit months
                const year = date.getFullYear();
                return `${day}-${month}-${year}`; // Return in DD-MM-YYYY format
            }

            const startDate = formatDate(startDatef);
            const endDate = formatDate(endDatef);

            html2canvas(document.querySelector("#list")).then(canvas => {
                // Get the image data from the canvas
                const imgData = canvas.toDataURL('image/png');

                // Create jsPDF instance
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: 'landscape',
                    unit: 'mm',
                    format: 'a4'
                });

                // Add the header (From Date, To Date, Name) at the top
                pdf.setFontSize(12);
                pdf.text(`From Date: ${startDate} -- To Date: ${endDate}`, 10, 16); // x=10, y=20
                pdf.text(`CAPA Dashboard`, 10, 10);          // x=10, y=10

                // Calculate dimensions to fit image into the A4 landscape page
                const pageWidth = 297; // A4 width in landscape (in mm)
                const pageHeight = 210; // A4 height in landscape (in mm)
                const imgWidth = pageWidth - 20; // Margins of 10mm on both sides
                const imgHeight = (canvas.height * imgWidth) / canvas.width; // Scale the image

                // Add the image (below the header) starting at y=40 to leave space for the header
                pdf.addImage(imgData, 'PNG', 10, 40, imgWidth, imgHeight);

                // Save the PDF
                pdf.save("CAPA Chart.pdf");
            });
        });
    </script>
    <script>
        window.onload = function () {
            const button = document.querySelector('#Exceldatacapture');
            if (button) {
                button.addEventListener('click', function () {
                    //console.log("Button clicked!");

                    const startDatef = document.getElementById('startDate').value;
                    const endDatef = document.getElementById('endDate').value;

                    //console.log("Start Date:", startDatef, "End Date:", endDatef);

                    // Check if the element #list exists
                    const listElement = document.querySelector("#list");
                    if (!listElement) {
                        console.error("Element with id 'list' not found.");
                        return;
                    }

                    // Capture chart as image
                    html2canvas(listElement).then(function (canvas) {
                        //console.log("html2canvas completed successfully");

                        // Log canvas dimensions
                        //console.log("Canvas size:", canvas.width, canvas.height);

                        const context = canvas.getContext("2d");

                        // Set font and text style
                        context.font = "30px Arial";
                        context.fillStyle = "black";
                        context.textBaseline = "top";

                        // Add text at specified positions
                        context.fillText("From: " + startDatef, 20, 20);
                        context.fillText("To: " + endDatef, 20, 60);

                        // Log canvas to check if the text was added
                        //console.log("Canvas after adding text:", canvas);

                        // Convert canvas to image
                        const chart1DataUrl = canvas.toDataURL('image/png');
                        //console.log("Image URL generated:", chart1DataUrl);

                        // Create Excel file using ExcelJS
                        const workbook = new ExcelJS.Workbook();
                        const worksheet = workbook.addWorksheet('CAPA Dashboard');
                        console.log("ExcelJS Workbook created");

                        // Add the modified chart image to the Excel sheet
                        const chart1Image = workbook.addImage({
                            base64: chart1DataUrl,
                            extension: 'png',
                        });
                        worksheet.addImage(chart1Image, {
                            tl: { col: 1, row: 5 },
                            ext: { width: 1700, height: 900 },
                        });

                        workbook.xlsx.writeBuffer().then(function (buffer) {
                            console.log("Excel file is ready for download");
                            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                            const link = document.createElement('a');
                            link.href = URL.createObjectURL(blob);
                            link.download = 'CAPA_Dashboard.xlsx';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        }).catch(function (error) {
                            console.error("Error creating Excel file:", error);
                        });
                    }).catch(function (error) {
                        console.error("Error capturing chart as image:", error);
                    });
                });
            }
        };
    </script>
</body>
</html>



